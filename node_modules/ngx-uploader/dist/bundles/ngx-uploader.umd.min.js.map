{"version":3,"file":"ngx-uploader.umd.min.js","sources":["../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/PairsObservable.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/observable/dom/AjaxObservable.ts","../../../node_modules/src/util/assign.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/pluck.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/operators/windowTime.ts","~/ngx-uploader/src/ngx-uploader/classes/ngx-uploader.class.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/observable/bindCallback.ts","../../../node_modules/src/add/observable/bindCallback.ts","../../../node_modules/src/observable/bindNodeCallback.ts","../../../node_modules/src/add/observable/bindNodeCallback.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/combineLatest.ts","../../../node_modules/src/add/observable/combineLatest.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/add/observable/concat.ts","../../../node_modules/src/observable/DeferObservable.ts","../../../node_modules/src/observable/defer.ts","../../../node_modules/src/add/observable/defer.ts","../../../node_modules/src/observable/empty.ts","../../../node_modules/src/add/observable/empty.ts","../../../node_modules/src/observable/ForkJoinObservable.ts","../../../node_modules/src/observable/forkJoin.ts","../../../node_modules/src/add/observable/forkJoin.ts","../../../node_modules/src/add/observable/from.ts","../../../node_modules/src/observable/FromEventObservable.ts","../../../node_modules/src/observable/fromEvent.ts","../../../node_modules/src/add/observable/fromEvent.ts","../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../node_modules/src/observable/fromEventPattern.ts","../../../node_modules/src/add/observable/fromEventPattern.ts","../../../node_modules/src/observable/fromPromise.ts","../../../node_modules/src/add/observable/fromPromise.ts","../../../node_modules/src/observable/GenerateObservable.ts","../../../node_modules/src/observable/generate.ts","../../../node_modules/src/add/observable/generate.ts","../../../node_modules/src/observable/IfObservable.ts","../../../node_modules/src/observable/if.ts","../../../node_modules/src/add/observable/if.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/observable/IntervalObservable.ts","../../../node_modules/src/observable/interval.ts","../../../node_modules/src/add/observable/interval.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/add/observable/merge.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/add/observable/race.ts","../../../node_modules/src/observable/NeverObservable.ts","../../../node_modules/src/observable/never.ts","../../../node_modules/src/add/observable/never.ts","../../../node_modules/src/add/observable/of.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/observable/onErrorResumeNext.ts","../../../node_modules/src/add/observable/onErrorResumeNext.ts","../../../node_modules/src/observable/pairs.ts","../../../node_modules/src/add/observable/pairs.ts","../../../node_modules/src/observable/RangeObservable.ts","../../../node_modules/src/observable/range.ts","../../../node_modules/src/add/observable/range.ts","../../../node_modules/src/observable/UsingObservable.ts","../../../node_modules/src/observable/using.ts","../../../node_modules/src/add/observable/using.ts","../../../node_modules/src/observable/ErrorObservable.ts","../../../node_modules/src/observable/throw.ts","../../../node_modules/src/add/observable/throw.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/observable/timer.ts","../../../node_modules/src/add/observable/timer.ts","../../../node_modules/src/observable/zip.ts","../../../node_modules/src/add/observable/zip.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/observable/dom/ajax.ts","../../../node_modules/src/add/observable/dom/ajax.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/observable/dom/WebSocketSubject.ts","../../../node_modules/src/observable/dom/webSocket.ts","../../../node_modules/src/add/observable/dom/webSocket.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operator/buffer.ts","../../../node_modules/src/add/operator/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operator/bufferCount.ts","../../../node_modules/src/add/operator/bufferCount.ts","../../../node_modules/src/operator/bufferTime.ts","../../../node_modules/src/add/operator/bufferTime.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operator/bufferToggle.ts","../../../node_modules/src/add/operator/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operator/bufferWhen.ts","../../../node_modules/src/add/operator/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/operator/catch.ts","../../../node_modules/src/add/operator/catch.ts","../../../node_modules/src/operators/combineAll.ts","../../../node_modules/src/operator/combineAll.ts","../../../node_modules/src/add/operator/combineAll.ts","../../../node_modules/src/operator/combineLatest.ts","../../../node_modules/src/add/operator/combineLatest.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/src/operator/concat.ts","../../../node_modules/src/add/operator/concat.ts","../../../node_modules/src/operator/concatAll.ts","../../../node_modules/src/add/operator/concatAll.ts","../../../node_modules/src/operators/concatMap.ts","../../../node_modules/src/operator/concatMap.ts","../../../node_modules/src/add/operator/concatMap.ts","../../../node_modules/src/operators/concatMapTo.ts","../../../node_modules/src/operator/concatMapTo.ts","../../../node_modules/src/add/operator/concatMapTo.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operator/count.ts","../../../node_modules/src/add/operator/count.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operator/dematerialize.ts","../../../node_modules/src/add/operator/dematerialize.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operator/debounce.ts","../../../node_modules/src/add/operator/debounce.ts","../../../node_modules/src/operator/debounceTime.ts","../../../node_modules/src/add/operator/debounceTime.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operator/defaultIfEmpty.ts","../../../node_modules/src/add/operator/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operator/delay.ts","../../../node_modules/src/add/operator/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operator/delayWhen.ts","../../../node_modules/src/add/operator/delayWhen.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operator/distinct.ts","../../../node_modules/src/add/operator/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/operator/distinctUntilChanged.ts","../../../node_modules/src/add/operator/distinctUntilChanged.ts","../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operator/do.ts","../../../node_modules/src/add/operator/do.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operator/exhaust.ts","../../../node_modules/src/add/operator/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operator/exhaustMap.ts","../../../node_modules/src/add/operator/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operator/expand.ts","../../../node_modules/src/add/operator/expand.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operator/elementAt.ts","../../../node_modules/src/add/operator/elementAt.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operator/filter.ts","../../../node_modules/src/add/operator/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operator/finally.ts","../../../node_modules/src/add/operator/finally.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/operator/find.ts","../../../node_modules/src/add/operator/find.ts","../../../node_modules/src/operators/findIndex.ts","../../../node_modules/src/operator/findIndex.ts","../../../node_modules/src/add/operator/findIndex.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/operator/first.ts","../../../node_modules/src/add/operator/first.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operator/groupBy.ts","../../../node_modules/src/add/operator/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operator/ignoreElements.ts","../../../node_modules/src/add/operator/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operator/isEmpty.ts","../../../node_modules/src/add/operator/isEmpty.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/operator/audit.ts","../../../node_modules/src/add/operator/audit.ts","../../../node_modules/src/operators/auditTime.ts","../../../node_modules/src/operator/auditTime.ts","../../../node_modules/src/add/operator/auditTime.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operator/last.ts","../../../node_modules/src/add/operator/last.ts","../../../node_modules/src/operator/let.ts","../../../node_modules/src/add/operator/let.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operator/every.ts","../../../node_modules/src/add/operator/every.ts","../../../node_modules/src/operator/map.ts","../../../node_modules/src/add/operator/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operator/mapTo.ts","../../../node_modules/src/add/operator/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operator/materialize.ts","../../../node_modules/src/add/operator/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/max.ts","../../../node_modules/src/operator/max.ts","../../../node_modules/src/add/operator/max.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/operator/merge.ts","../../../node_modules/src/add/operator/merge.ts","../../../node_modules/src/operator/mergeAll.ts","../../../node_modules/src/add/operator/mergeAll.ts","../../../node_modules/src/operator/mergeMap.ts","../../../node_modules/src/add/operator/mergeMap.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operator/mergeMapTo.ts","../../../node_modules/src/add/operator/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operator/mergeScan.ts","../../../node_modules/src/add/operator/mergeScan.ts","../../../node_modules/src/operators/min.ts","../../../node_modules/src/operator/min.ts","../../../node_modules/src/add/operator/min.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operator/multicast.ts","../../../node_modules/src/add/operator/multicast.ts","../../../node_modules/src/operator/observeOn.ts","../../../node_modules/src/add/operator/observeOn.ts","../../../node_modules/src/operator/onErrorResumeNext.ts","../../../node_modules/src/add/operator/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/operator/pairwise.ts","../../../node_modules/src/add/operator/pairwise.ts","../../../node_modules/src/util/not.ts","../../../node_modules/src/operators/partition.ts","../../../node_modules/src/operator/partition.ts","../../../node_modules/src/add/operator/partition.ts","../../../node_modules/src/operator/pluck.ts","../../../node_modules/src/add/operator/pluck.ts","../../../node_modules/src/operators/publish.ts","../../../node_modules/src/operator/publish.ts","../../../node_modules/src/add/operator/publish.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/operators/publishBehavior.ts","../../../node_modules/src/operator/publishBehavior.ts","../../../node_modules/src/add/operator/publishBehavior.ts","../../../node_modules/src/operators/publishReplay.ts","../../../node_modules/src/operator/publishReplay.ts","../../../node_modules/src/add/operator/publishReplay.ts","../../../node_modules/src/operators/publishLast.ts","../../../node_modules/src/operator/publishLast.ts","../../../node_modules/src/add/operator/publishLast.ts","../../../node_modules/src/operators/race.ts","../../../node_modules/src/operator/race.ts","../../../node_modules/src/add/operator/race.ts","../../../node_modules/src/operator/reduce.ts","../../../node_modules/src/add/operator/reduce.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operator/repeat.ts","../../../node_modules/src/add/operator/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operator/repeatWhen.ts","../../../node_modules/src/add/operator/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operator/retry.ts","../../../node_modules/src/add/operator/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operator/retryWhen.ts","../../../node_modules/src/add/operator/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operator/sample.ts","../../../node_modules/src/add/operator/sample.ts","../../../node_modules/src/operator/sampleTime.ts","../../../node_modules/src/add/operator/sampleTime.ts","../../../node_modules/src/operator/scan.ts","../../../node_modules/src/add/operator/scan.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operator/sequenceEqual.ts","../../../node_modules/src/add/operator/sequenceEqual.ts","../../../node_modules/src/operator/share.ts","../../../node_modules/src/add/operator/share.ts","../../../node_modules/src/operator/shareReplay.ts","../../../node_modules/src/add/operator/shareReplay.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operator/single.ts","../../../node_modules/src/add/operator/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operator/skip.ts","../../../node_modules/src/add/operator/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operator/skipLast.ts","../../../node_modules/src/add/operator/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operator/skipUntil.ts","../../../node_modules/src/add/operator/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operator/skipWhile.ts","../../../node_modules/src/add/operator/skipWhile.ts","../../../node_modules/src/operators/startWith.ts","../../../node_modules/src/operator/startWith.ts","../../../node_modules/src/add/operator/startWith.ts","../../../node_modules/src/util/Immediate.ts","../../../node_modules/src/scheduler/AsapAction.ts","../../../node_modules/src/scheduler/asap.ts","../../../node_modules/src/scheduler/AsapScheduler.ts","../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../node_modules/src/operators/subscribeOn.ts","../../../node_modules/src/operator/subscribeOn.ts","../../../node_modules/src/add/operator/subscribeOn.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchAll.ts","../../../node_modules/src/operator/switch.ts","../../../node_modules/src/add/operator/switch.ts","../../../node_modules/src/operator/switchMap.ts","../../../node_modules/src/add/operator/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operator/switchMapTo.ts","../../../node_modules/src/add/operator/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operator/take.ts","../../../node_modules/src/add/operator/take.ts","../../../node_modules/src/operator/takeLast.ts","../../../node_modules/src/add/operator/takeLast.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operator/takeUntil.ts","../../../node_modules/src/add/operator/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operator/takeWhile.ts","../../../node_modules/src/add/operator/takeWhile.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operator/throttle.ts","../../../node_modules/src/add/operator/throttle.ts","../../../node_modules/src/operator/throttleTime.ts","../../../node_modules/src/add/operator/throttleTime.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/operator/timeInterval.ts","../../../node_modules/src/add/operator/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operator/timeout.ts","../../../node_modules/src/add/operator/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operator/timeoutWith.ts","../../../node_modules/src/add/operator/timeoutWith.ts","../../../node_modules/src/operators/timestamp.ts","../../../node_modules/src/operator/timestamp.ts","../../../node_modules/src/add/operator/timestamp.ts","../../../node_modules/src/operator/toArray.ts","../../../node_modules/src/add/operator/toArray.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operator/window.ts","../../../node_modules/src/add/operator/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operator/windowCount.ts","../../../node_modules/src/add/operator/windowCount.ts","../../../node_modules/src/operator/windowTime.ts","../../../node_modules/src/add/operator/windowTime.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operator/windowToggle.ts","../../../node_modules/src/add/operator/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operator/windowWhen.ts","../../../node_modules/src/add/operator/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operator/withLatestFrom.ts","../../../node_modules/src/add/operator/withLatestFrom.ts","../../../node_modules/src/operator/zip.ts","../../../node_modules/src/add/operator/zip.ts","../../../node_modules/src/operators/zipAll.ts","../../../node_modules/src/operator/zipAll.ts","../../../node_modules/src/add/operator/zipAll.ts","../../../node_modules/src/testing/SubscriptionLog.ts","../../../node_modules/src/testing/SubscriptionLoggable.ts","../../../node_modules/src/util/applyMixins.ts","../../../node_modules/src/testing/ColdObservable.ts","../../../node_modules/src/testing/HotObservable.ts","../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/src/testing/TestScheduler.ts","../../../node_modules/src/util/AnimationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../node_modules/src/operators.ts","../../../node_modules/src/scheduler/animationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/src/Rx.ts","~/ngx-uploader/src/ngx-uploader/classes/interfaces.ts","~/ngx-uploader/src/ngx-uploader/directives/ng-file-select.directive.ts","~/ngx-uploader/src/ngx-uploader/directives/ng-file-drop.directive.ts","~/ngx-uploader/src/ngx-uploader/module/ngx-uploader.module.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { EventEmitter } from '@angular/core';\nimport { Observable,  Subject,  Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile } from './interfaces';\n/**\n * @param {?} bytes\n * @return {?}\n */\nexport function humanizeBytes(bytes: number): string {\n  if (bytes === 0) {\n    return '0 Byte';\n  }\n\n  const /** @type {?} */ k = 1024;\n  const /** @type {?} */ sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const /** @type {?} */ i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nexport class NgUploaderService {\n  queue: UploadFile[];\n  serviceEvents: EventEmitter<UploadOutput>;\n  uploadScheduler: Subject<{ file: UploadFile, event: UploadInput }>;\n  subs: { id: string, sub: Subscription }[];\n  contentTypes: string[];\n/**\n * @param {?=} concurrency\n * @param {?=} contentTypes\n */\nconstructor(concurrency: number = Number.POSITIVE_INFINITY, contentTypes: string[] = ['*']) {\n    this.queue = [];\n    this.serviceEvents = new EventEmitter<UploadOutput>();\n    this.uploadScheduler = new Subject();\n    this.subs = [];\n    this.contentTypes = contentTypes;\n\n    this.uploadScheduler\n      .pipe(\n        mergeMap(upload => this.startUpload(upload), concurrency)\n      )\n      .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n  }\n/**\n * @param {?} incomingFiles\n * @return {?}\n */\nhandleFiles(incomingFiles: FileList): void {\n    const /** @type {?} */ allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\n      if (this.isContentTypeAllowed(checkFile.type)) {\n        acc = acc.concat(checkFile);\n      } else {\n        const /** @type {?} */ rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\n        this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n      }\n\n      return acc;\n    }, []);\n\n    this.queue.push(...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\n      const /** @type {?} */ uploadFile: UploadFile = this.makeUploadFile(file, i);\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n      return uploadFile;\n    }));\n\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\n  }\n/**\n * @param {?} input\n * @return {?}\n */\ninitInputEvents(input: EventEmitter<UploadInput>): Subscription {\n    return input.subscribe((event: UploadInput) => {\n      switch (event.type) {\n        case 'uploadFile':\n          const /** @type {?} */ uploadFileIndex = this.queue.findIndex(file => file === event.file);\n          if (uploadFileIndex !== -1 && event.file) {\n            this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\n          }\n        break;\n        case 'uploadAll':\n          const /** @type {?} */ files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n          files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\n        break;\n        case 'cancel':\n          const /** @type {?} */ id = event.id || null;\n          if (!id) {\n            return;\n          }\n\n          const /** @type {?} */ index = this.subs.findIndex(sub => sub.id === id);\n          if (index !== -1 && this.subs[index].sub) {\n            this.subs[index].sub.unsubscribe();\n\n            const /** @type {?} */ fileIndex = this.queue.findIndex(file => file.id === id);\n            if (fileIndex !== -1) {\n              this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\n            }\n          }\n        break;\n        case 'cancelAll':\n          this.subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n            }\n\n            const /** @type {?} */ file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n            if (file) {\n              file.progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: file });\n            }\n          });\n        break;\n        case 'remove':\n          if (!event.id) {\n            return;\n          }\n\n          const /** @type {?} */ i = this.queue.findIndex(file => file.id === event.id);\n          if (i !== -1) {\n            const /** @type {?} */ file = this.queue[i];\n            this.queue.splice(i, 1);\n            this.serviceEvents.emit({ type: 'removed', file: file });\n          }\n        break;\n        case 'removeAll':\n          if (this.queue.length) {\n            this.queue = [];\n            this.serviceEvents.emit({ type: 'removedAll' });\n          }\n        break;\n      }\n    });\n  }\n/**\n * @param {?} upload\n * @return {?}\n */\nstartUpload(upload: { file: UploadFile, event: UploadInput }): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const /** @type {?} */ sub = this.uploadFile(upload.file, upload.event)\n        .subscribe(output => {\n          observer.next(output);\n        }, err => {\n          observer.error(err);\n          observer.complete();\n        }, () => {\n          observer.complete();\n        });\n\n      this.subs.push({ id: upload.file.id, sub: sub });\n    });\n  }\n/**\n * @param {?} file\n * @param {?} event\n * @return {?}\n */\nuploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const /** @type {?} */ url = event.url || '';\n      const /** @type {?} */ method = event.method || 'POST';\n      const /** @type {?} */ data = event.data || {};\n      const /** @type {?} */ headers = event.headers || {};\n\n      const /** @type {?} */ xhr = new XMLHttpRequest();\n      const /** @type {?} */ time: number = new Date().getTime();\n      let /** @type {?} */ progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\n      let /** @type {?} */ speed = 0;\n      let /** @type {?} */ eta: number | null = null;\n\n      xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\n        if (e.lengthComputable) {\n          const /** @type {?} */ percentage = Math.round((e.loaded * 100) / e.total);\n          const /** @type {?} */ diff = new Date().getTime() - time;\n          speed = Math.round(e.loaded / diff * 1000);\n          progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n          eta = Math.ceil((e.total - e.loaded) / speed);\n\n          file.progress = {\n            status: UploadStatus.Uploading,\n            data: {\n              percentage: percentage,\n              speed: speed,\n              speedHuman: `${humanizeBytes(speed)}/s`,\n              startTime: progressStartTime,\n              endTime: null,\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta)\n            }\n          };\n\n          observer.next({ type: 'uploading', file: file });\n        }\n      }, false);\n\n      xhr.upload.addEventListener('error', (e: Event) => {\n        observer.error(e);\n        observer.complete();\n      });\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          const /** @type {?} */ speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n          file.progress = {\n            status: UploadStatus.Done,\n            data: {\n              percentage: 100,\n              speed: speedAverage,\n              speedHuman: `${humanizeBytes(speedAverage)}/s`,\n              startTime: progressStartTime,\n              endTime: new Date().getTime(),\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta || 0)\n            }\n          };\n\n          file.responseStatus = xhr.status;\n\n          try {\n            file.response = JSON.parse(xhr.response);\n          } catch ( /** @type {?} */e) {\n            file.response = xhr.response;\n          }\n\n          file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n          observer.next({ type: 'done', file: file });\n\n          observer.complete();\n        }\n      };\n\n      xhr.open(method, url, true);\n      xhr.withCredentials = event.withCredentials ? true : false;\n\n      try {\n        const /** @type {?} */ uploadFile = /** @type {?} */(( <BlobFile>file.nativeFile));\n        const /** @type {?} */ uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n\n        if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n          observer.complete();\n        }\n\n        Object.keys(data).forEach(key => file.form.append(key, data[key]));\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n\n        file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n\n        this.serviceEvents.emit({ type: 'start', file: file });\n        xhr.send(file.form);\n      } catch ( /** @type {?} */e) {\n        observer.complete();\n      }\n\n      return () => {\n        xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} sec\n * @return {?}\n */\nsecondsToHuman(sec: number): string {\n    return new Date(sec * 1000).toISOString().substr(11, 8);\n  }\n/**\n * @return {?}\n */\ngenerateId(): string {\n    return Math.random().toString(36).substring(7);\n  }\n/**\n * @param {?} contentTypes\n * @return {?}\n */\nsetContentTypes(contentTypes: string[]): void {\n    if ( typeof contentTypes != 'undefined' && contentTypes instanceof Array ) {\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\n        this.contentTypes = ['*'];\n      } else {\n        this.contentTypes = contentTypes;\n      }\n      return;\n    }\n    this.contentTypes = ['*'];\n  }\n/**\n * @return {?}\n */\nallContentTypesAllowed(): boolean {\n    return this.contentTypes.find((type: string) => type === '*') !== undefined;\n  }\n/**\n * @param {?} mimetype\n * @return {?}\n */\nisContentTypeAllowed(mimetype: string): boolean {\n    if (this.allContentTypesAllowed()) {\n      return true;\n    }\n    return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\n  }\n/**\n * @param {?} file\n * @param {?} index\n * @return {?}\n */\nmakeUploadFile(file: File, index: number): UploadFile {\n    return {\n      fileIndex: index,\n      id: this.generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      form: new FormData(),\n      progress: {\n        status: UploadStatus.Queue,\n        data: {\n          percentage: 0,\n          speed: 0,\n          speedHuman: `${humanizeBytes(0)}/s`,\n          startTime: null,\n          endTime: null,\n          eta: null,\n          etaHuman: null\n        }\n      },\n      lastModifiedDate: file.lastModifiedDate,\n      sub: undefined,\n      nativeFile: file\n    };\n  }\n/**\n * @param {?} httpHeaders\n * @return {?}\n */\nprivate parseResponseHeaders(httpHeaders: ByteString) {\n    if (!httpHeaders) {\n      return;\n    }\n    return httpHeaders.split('\\n')\n      .map(x => x.split(/: */, 2))\n      .filter(x => x[0])\n      .reduce((ac, x) => {\n        ac[x[0]] = x[1];\n        return ac;\n      }, {});\n  }\n}\n\nfunction NgUploaderService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderService.prototype.queue;\n/** @type {?} */\nNgUploaderService.prototype.serviceEvents;\n/** @type {?} */\nNgUploaderService.prototype.uploadScheduler;\n/** @type {?} */\nNgUploaderService.prototype.subs;\n/** @type {?} */\nNgUploaderService.prototype.contentTypes;\n}\n\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","import { Subscription } from 'rxjs';\n\nexport interface UploaderOptions {\n  concurrency: number;\n  allowedContentTypes?: string[];\n}\n\nexport interface BlobFile extends Blob {\n  name: string;\n}\nexport type UploadStatus = number;\nexport let UploadStatus: any = {};\nUploadStatus.Queue = 0;\nUploadStatus.Uploading = 1;\nUploadStatus.Done = 2;\nUploadStatus.Cancelled = 3;\nUploadStatus[UploadStatus.Queue] = \"Queue\";\nUploadStatus[UploadStatus.Uploading] = \"Uploading\";\nUploadStatus[UploadStatus.Done] = \"Done\";\nUploadStatus[UploadStatus.Cancelled] = \"Cancelled\";\n\n\nexport interface UploadProgress {\n  status: UploadStatus;\n  data?: {\n    percentage: number;\n    speed: number;\n    speedHuman: string;\n    startTime: number | null;\n    endTime: number | null;\n    eta: number | null;\n    etaHuman: string | null;\n  };\n}\n\nexport interface UploadFile {\n  id: string;\n  fileIndex: number;\n  lastModifiedDate: Date;\n  name: string;\n  size: number;\n  type: string;\n  form: FormData;\n  progress: UploadProgress;\n  response?: any;\n  responseStatus?: number;\n  sub?: Subscription | any;\n  nativeFile?: File;\n  responseHeaders?: { [key: string]: string };\n}\n\nexport interface UploadOutput {\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\n  file?: UploadFile;\n  nativeFile?: File;\n}\n\nexport interface UploadInput {\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\n  url?: string;\n  method?: string;\n  id?: string;\n  fieldName?: string;\n  fileIndex?: number;\n  file?: UploadFile;\n  data?: { [key: string]: string | Blob };\n  headers?: { [key: string]: string };\n  withCredentials?: boolean;\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { UploadOutput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs';\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<any>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n    this.el.addEventListener('change', this.fileListener, false);\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.el){\n      this.el.removeEventListener('change', this.fileListener, false);\n      this._sub.forEach(sub => sub.unsubscribe());\n    }\n  }\n\n  fileListener = () => {\n    if (this.el.files) {\n      this.upload.handleFiles(this.el.files);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileSelect]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n};\n}\n\nfunction NgFileSelectDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileSelectDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileSelectDirective.ctorParameters;\n/** @type {?} */\nNgFileSelectDirective.propDecorators;\n/** @type {?} */\nNgFileSelectDirective.prototype.options;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileSelectDirective.prototype.upload;\n/** @type {?} */\nNgFileSelectDirective.prototype.el;\n/** @type {?} */\nNgFileSelectDirective.prototype._sub;\n/** @type {?} */\nNgFileSelectDirective.prototype.fileListener;\n/** @type {?} */\nNgFileSelectDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { UploadOutput, UploadInput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs';\nexport class NgFileDropDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<UploadInput>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sub.forEach(sub => sub.unsubscribe());\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const /** @type {?} */ event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragOver(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragLeave(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileDrop]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n'onDrop': [{ type: HostListener, args: ['drop', ['$event'], ] },],\n'onDragOver': [{ type: HostListener, args: ['dragover', ['$event'], ] },],\n'onDragLeave': [{ type: HostListener, args: ['dragleave', ['$event'], ] },],\n};\n}\n\nfunction NgFileDropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileDropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileDropDirective.ctorParameters;\n/** @type {?} */\nNgFileDropDirective.propDecorators;\n/** @type {?} */\nNgFileDropDirective.prototype.options;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileDropDirective.prototype.upload;\n/** @type {?} */\nNgFileDropDirective.prototype.el;\n/** @type {?} */\nNgFileDropDirective.prototype._sub;\n/** @type {?} */\nNgFileDropDirective.prototype.stopEvent;\n/** @type {?} */\nNgFileDropDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { NgFileDropDirective } from '../directives/ng-file-drop.directive';\nimport { NgFileSelectDirective } from '../directives/ng-file-select.directive';\nexport class NgUploaderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ],\n  exports: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgUploaderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgUploaderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tryCatcher","tryCatchTarget","apply","this","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","length","input","prev","fn","noop_1","noop","dispatchNext","arg","value","subject","next","complete","dispatchError","error","dispatch","state","self","source","subscriber","context","_a","callbackFunc","args","scheduler","AsyncSubject_1","AsyncSubject","handler","handlerFn","innerArgs","_i","selector","shift","add","schedule","result_2","tryCatch_1","tryCatch","subscribe","dispatchNext$1","dispatchError$1","dispatchNext$2","closed","dispatchError$2","toLength","o","len","isNaN","root_1","root","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","dispatch$1","obj","keys","index","key","zipStatic","observables","project","pop","ArrayObservable_1","ArrayObservable","lift","ZipOperator","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","mapResponse","responseType","parseXhrResponse","xhr","response","JSON","parse","responseText","responseXML","assignImpl","target","sources","i","k","hasOwnProperty","getAssign","Object","assign","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","bufferTimeSpan","dispatchBufferCreation","bufferCreationInterval","dispatchBufferClose","dispatchNext$3","debouncedNext","minimalSetImpl","MinimalSet","_values","prototype","has","push","indexOf","defineProperty","get","clear","pluck$3","properties","Error","map_1","map","props","x","currentProp","p","undefined","plucker","dispatchNotification","period","notifyNext","shareSubjectFactory","Subject_1","Subject","shareReplay$3","bufferSize","windowTime","subscription","refCount","hasError","isComplete","ReplaySubject_1","ReplaySubject","innerSub","unsubscribe","shareReplayOperator","dispatchNext$4","clearThrottle","toArrayReducer","arr","item","dispatchWindowTimeSpanOnly","windowTimeSpan","window","closeWindow","openWindow","dispatchWindowCreation","windowCreationInterval","action","timeSpanState","dispatchWindowClose","remove","humanizeBytes","bytes","log","parseFloat","pow","toFixed","__window","__self","WorkerGlobalScope","_root","global","Array","isArray","_super","call","toString","join","name","stack","message","__extends","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","isFunction_1","isFunction","trial","isArray_1","sub","isObject_1","isObject","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","Symbol","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","Observable","_isScalar","_subscribe","operator","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","SubjectSubscription_1","asObservable","Observable_1","Subject_2","hasNext","hasCompleted","BoundCallbackObservable","func","result_1","bindCallback","bindCallback_1","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","ScalarObservable","done","EmptyObservable","array","of","isScheduler_1","isScheduler","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","notifyError","notifyComplete","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","obs","TypeError","msg","none","combineLatest_2$2","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","active","values","toRespond","subscribeToResult_1","subscribeToResult","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","return","str","idx","charAt","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","mergeMap_2","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","buffer","_tryNext","_innerSub","_notifyResultSelector","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_1","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","ForkJoinObservable_2","ForkJoinObservable","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","forkJoin","forkJoin_1","FromEventObservable","sourceObj","eventName","options","setupSubscription","isNodeList","isHTMLCollection","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","if","if_1","_if","val","Action","work","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","scheduled","Scheduler_1","AsyncScheduler_1","AsyncAction_1","IntervalObservable","async_1","async","isNumeric_1","isNumeric","interval","interval_1","last","merge","merge_1","race_2","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","race","race_1","NeverObservable","never","never_1","onErrorResumeNext_2$1","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNextStatic","onErrorResumeNext","PairsObservable","pairs","pairs_1","RangeObservable","start","_count","range","range_1","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","_throw","TimerObservable","dueTime","isDate_1","isDate","initialDelay","timer","timer_1","zip_2$1","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","ZipSubscriber_1","nextResult","zip_1","zip","map_2","thisArg","MapOperator","MapSubscriber","MapOperator_1","ajaxGet_1","ajaxPost_1","ajaxDelete_1","ajaxPut_1","ajaxPatch_1","ajaxGetJSON_1","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","timeout","prop","AjaxSubscriber","post","delete","put","patch","getJSON","AjaxObservable_2","FormData","serializeBody","send","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","readyState","status_1","status","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onerror","onreadystatechange","abort","AjaxSubscriber_1","originalEvent","AjaxResponse_1","AjaxError_1","ajax","ajax_1","QueueAction","QueueScheduler","QueueAction_1","ReplaySubject_2","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","queue_1","queue","eventsCount","spliceCount","time","max","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","data","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","webSocket","webSocket_1","buffer_2$2","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","bufferCount_2$2","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","bufferTime_2$2","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","bufferTime_1","bufferTime","bufferToggle_2$2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","bufferWhen_2$2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","catchError_2","CatchOperator","caught","CatchSubscriber","err2","catchError_1","catchError","catch","catch_1","_catch","combineAll_1","combineAll","concat_2","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","count_2$2","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize_2$2","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","debounce_2$2","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounce_1","debounce","debounceTime_2$2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","debounceTime","defaultIfEmpty_2$2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delay_2$2","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","delayWhen_2$2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayWhen_1","delayWhen","distinct_2$2","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinct","distinctUntilChanged_2$2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","tap_2","DoOperator","DoSubscriber","safeSubscriber","tap_1","tap","do_1","_do","exhaust_2$2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","exhaustMap_2$2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","expand_2$2","ExpandOperator","ExpandSubscriber","ExpandOperator_1","subscribeToProjection","expand_1","expand","ArgumentOutOfRangeError","elementAt_2$2","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","filter_2$2","FilterOperator","FilterSubscriber","filter_1","filter","finalize_2","callback","FinallyOperator","FinallySubscriber","finalize_1","finalize","finally","finally_1","_finally","find_2$2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","find_1","find","findIndex_1","findIndex","EmptyError","first_2$2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","first_1","first","MapPolyfill","size","_keys","set","cb","MapPolyfill_1","FastMap","groupBy_2$2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","GroupedObservable_1","groupBy_1","groupBy","ignoreElements_2$2","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","isEmpty_2$2","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit_2$2","AuditOperator","AuditSubscriber","throttled","audit_1","audit","auditTime_1","auditTime","last_2$2","LastOperator","LastSubscriber","last_1","let","let_1","letProto","letBind","every_2$2","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","mapTo_2$2","MapToOperator","MapToSubscriber","mapTo_1","mapTo","materialize_2$2","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","TakeLastSubscriber","ring","scan_1","scan","takeLast_1","takeLast","acc","comparer","reduce_1","max_1","merge_2","flatMap","mergeMapTo_2$2","MergeMapToOperator","MergeMapToSubscriber","MergeMapToOperator_1","mergeMapTo_1","mergeMapTo","flatMapTo","mergeScan_2$2","MergeScanOperator","MergeScanSubscriber","MergeScanOperator_1","mergeScan_1","mergeScan","min","min_1","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","multicast_2$2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","pairwise_2$2","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","not","partition_1","partition","pluck","pluck_1","publish_1","publish","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_2$2","RepeatOperator","RepeatSubscriber","repeat_1","repeat","repeatWhen_2$2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","repeatWhen","retry_2$2","RetryOperator","RetrySubscriber","retry_1","retry","retryWhen_2$2","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","sample_2$2","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","sampleTime_2$2","SampleTimeOperator","SampleTimeSubscriber","sampleTime_1","sampleTime","sequenceEqual_2$2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualOperator_1","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","SequenceEqualSubscriber_1","sequenceEqual_1","sequenceEqual","share_1","share","shareReplay","shareReplay_1","single_2$2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","single","skip_2$2","SkipOperator","SkipSubscriber","skip_1","skip","skipLast_2$2","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","skipUntil_2$2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","skipWhile_2$2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","Immediate_1","Immediate","AsapScheduler","AsapAction_1","SubscribeOnObservable","delayTime","asap_1","asap","subscribeOn_2$2","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMap","switchAll_1","switchAll","switch","switch_1","_switch","switchMapTo_2$2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","take_2$2","TakeOperator","TakeSubscriber","take_1","take","takeUntil_2$2","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","takeWhile_2$2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttleTime_2$2","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","throttleTime","timeInterval_2$2","TimeIntervalOperator","TimeInterval","TimeInterval_1","TimeIntervalSubscriber","lastTime","span","timeInterval_1","timeInterval","TimeoutError","timeout_2$2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","timeoutWith_2$2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","timestamp_2$2","Timestamp","timestamp","timestamp_1","toArray_1","toArray","window_2$2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","prevWindow","newWindow","window_1","windowCount_2$2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowCount","windowTime_2$2","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","windowTime_1","windowToggle_2$2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","windowWhen_2$2","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","withLatestFrom_2$2","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipProto","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","logSubscribedFrame","SubscriptionLog_1","SubscriptionLog","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","ColdObservable","messages","scheduleMessages","messagesLength","frame","ColdObservable_2","applyMixins_1","applyMixins","SubscriptionLoggable_1","HotObservable","setup","HotObservable_2","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frameTimeFactor","sort","sortActions","defaultMaxFrame","RequestAnimationFrameDefinition","TestScheduler","assertDeepEqual","VirtualTimeScheduler_1","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","ColdObservable_1","createHotObservable","HotObservable_1","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrameAction","AnimationFrame_1","AnimationFrame","mergeMap$4","AnimationFrameScheduler","AnimationFrameAction_1","UploadStatus","Queue","Uploading","Done","Cancelled","NgUploaderService","concurrency","contentTypes","serviceEvents","EventEmitter","uploadScheduler","subs","startUpload","uploadOutput","handleFiles","incomingFiles","allowedIncomingFiles","checkFile","isContentTypeAllowed","type","rejectedFile","makeUploadFile","file","_d","uploadFile","initInputEvents","uploadFileIndex","progress","id_1","fileIndex","output","getTime","progressStartTime","startTime","speed","eta","lengthComputable","percentage","round","loaded","diff","ceil","speedHuman","endTime","etaHuman","secondsToHuman","DONE","speedAverage","responseStatus","responseHeaders","parseResponseHeaders","getAllResponseHeaders","uploadFile_1","uploadIndex","outFile","nativeFile","form","append","fieldName","sec","toISOString","substr","generateId","setContentTypes","allContentTypesAllowed","mimetype","lastModifiedDate","httpHeaders","split","ac","NgFileSelectDirective","elementRef","fileListener","el","files","ngOnInit","_sub","allowedContentTypes","nativeElement","uploadInput","ngOnDestroy","decorators","Directive","ctorParameters","ElementRef","propDecorators","Input","Output","NgFileDropDirective","stopEvent","stopPropagation","preventDefault","onDrop","dataTransfer","onDragOver","onDragLeave","HostListener","NgUploaderModule","NgModule","declarations"],"mappings":"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"}
